/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.interfazregistropedidos.igu;

import com.mycompany.interfazregistropedidos.logica.Cliente;
import com.mycompany.interfazregistropedidos.logica.ControladoraLogica;
import com.mycompany.interfazregistropedidos.logica.MetodoPago;
import com.mycompany.interfazregistropedidos.logica.Pedido;
import com.mycompany.interfazregistropedidos.logica.Producto;
import com.mycompany.interfazregistropedidos.logica.ProductoPedido;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import com.mycompany.interfazregistropedidos.exceptions.StockInvalidoException;
import static com.mycompany.interfazregistropedidos.igu.ArmarPedido.listaProductos;


public class EditarPedido extends javax.swing.JFrame implements Funcionamiento, Pedible{

    ControladoraLogica controladora = new ControladoraLogica();
    private Pedido pedidoAArmar = new Pedido();
    private Producto productoArmarPedido = null;
    private Cliente clientePedido = null;
    private SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy"); //Para añadir un calendario
    static List<ProductoPedido> listaProductos; // Será STATIC así por cada instancia de ArmarPedido que se crea al EditarProdPedido, se mantiene la lista
    private int numRemito;
    private int PRIMERA_COLUMNA = 0;
    private int NOMBRE_COLUMNA = 1;
    private int MINIMO = 0;
    private int TERCER_COLUMNA = 2;
    
    /**
     * Creates new form ArmarPedido
     */
    public EditarPedido(int numRemito) {        
        this.numRemito = numRemito;
        controladora = new ControladoraLogica();
        initComponents();
        this.txtFecha.setText(dateFormat.format(new Date())); // Asigna la fecha actual por defecto
        //VER SI NO HAY OTRA FORMA DE MANEJAR LA FECHA
        //A diferencia de la tabla ArmarPedido, los datos a cargar los busco mediante el ID, es decir, el N° de Remito
        Pedido pedidoAEditar = controladora.buscarPedido(this.numRemito);
        this.listaProductos = pedidoAEditar.getProductos();
        this.cargarDatosEdicion(this.numRemito);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        logoAlethya = new javax.swing.JLabel();
        lblArmaPedido = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lblCodProducto = new javax.swing.JLabel();
        txtCodProducto = new javax.swing.JTextField();
        lblCantProducto = new javax.swing.JLabel();
        spinCantProducto = new javax.swing.JSpinner();
        btnAniadirProducto = new javax.swing.JToggleButton();
        btnProductoHallado = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        txtCuitCliente = new javax.swing.JTextField();
        lblCuitCliente = new javax.swing.JLabel();
        txtRemito = new javax.swing.JTextField();
        lblCodProducto1 = new javax.swing.JLabel();
        lblFecha = new javax.swing.JLabel();
        txtFecha = new javax.swing.JFormattedTextField();
        lblClienteEncontrado = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        lblTotal = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        lblFormaPago = new javax.swing.JLabel();
        cmbFormaPago = new javax.swing.JComboBox<>();
        btnEliminar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaProductoPedidos = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        btnArmarPedido = new javax.swing.JToggleButton();
        btnLimpiar = new javax.swing.JToggleButton();
        btnVolverMenu = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        logoAlethya.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logoAlethya.png"))); // NOI18N

        lblArmaPedido.setFont(new java.awt.Font("Engravers MT", 1, 24)); // NOI18N
        lblArmaPedido.setText("ARMÁ TU PEDIDO");

        lblCodProducto.setText("Codigo Producto");

        txtCodProducto.setText("1");

        lblCantProducto.setText("Seleccione Cantidad");

        btnAniadirProducto.setText("Añadir Producto al Pedido");
        btnAniadirProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAniadirProductoActionPerformed(evt);
            }
        });

        btnProductoHallado.setText("Buscar Producto");
        btnProductoHallado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProductoHalladoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(130, 130, 130)
                                .addComponent(txtCodProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(lblCodProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(72, 72, 72))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnProductoHallado, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)))
                .addComponent(lblCantProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinCantProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addComponent(btnAniadirProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 598, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCantProducto)
                            .addComponent(spinCantProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAniadirProducto))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCodProducto)
                            .addComponent(txtCodProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnProductoHallado))))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 269, Short.MAX_VALUE)
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtCuitCliente.setText("12");

        lblCuitCliente.setText("Cuit Cliente");

        txtRemito.setText("#0101");

        lblCodProducto1.setText("N° Remito");

        lblFecha.setText("Fecha");

        txtFecha.setText("--/--/--");
        txtFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFechaActionPerformed(evt);
            }
        });

        lblClienteEncontrado.setText("Nombre Cliente Encontrado");
        lblClienteEncontrado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lblClienteEncontradoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCuitCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCodProducto1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtRemito, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCuitCliente))
                        .addGap(18, 18, 18)
                        .addComponent(lblClienteEncontrado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFecha)
                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCodProducto1)
                    .addComponent(txtRemito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCuitCliente)
                    .addComponent(txtCuitCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblClienteEncontrado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        lblTotal.setText("Total                  $");

        txtTotal.setText("0.0");
        txtTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalActionPerformed(evt);
            }
        });

        lblFormaPago.setText("Forma de Pago");

        cmbFormaPago.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Efectivo", "Transferencia", "Cheque", "Mercado Pago" }));
        cmbFormaPago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFormaPagoActionPerformed(evt);
            }
        });

        btnEliminar.setText("ELIMINAR PRODUCTO");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnEditar.setText("EDITAR PRODUCTO");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(lblFormaPago, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbFormaPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 178, Short.MAX_VALUE)
                .addComponent(btnEliminar)
                .addGap(32, 32, 32)
                .addComponent(btnEditar)
                .addGap(61, 61, 61))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditar)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblTotal)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbFormaPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFormaPago))
                .addContainerGap())
        );

        tablaProductoPedidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Codigo Producto", "Nombre", "Precio Unitario", "Cantidad", "Total por Producto"
            }
        ));
        jScrollPane1.setViewportView(tablaProductoPedidos);

        btnArmarPedido.setText("Armar Pedido");
        btnArmarPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArmarPedidoActionPerformed(evt);
            }
        });

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnVolverMenu.setText("Volver al Menú");
        btnVolverMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverMenuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnArmarPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnVolverMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(btnLimpiar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnVolverMenu))
                    .addComponent(btnArmarPedido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(14, 14, 14))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1227, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(577, 577, 577)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(405, 405, 405)
                .addComponent(logoAlethya)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblArmaPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(345, 345, 345)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(359, 359, 359)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblArmaPedido)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(logoAlethya)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(85, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1241, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFechaActionPerformed
        
    }//GEN-LAST:event_txtFechaActionPerformed

    private void cmbFormaPagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFormaPagoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbFormaPagoActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        this.limpiar();
        
        
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnArmarPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArmarPedidoActionPerformed
        try {
            //Armar Pedido
            Date fecha = dateFormat.parse(this.txtFecha.getText());
            MetodoPago formaPago = MetodoPago.values()[this.cmbFormaPago.getSelectedIndex()];
            double total = Double.parseDouble(this.txtTotal.getText());
            
            ///Relaciones
            List<ProductoPedido> productos = new ArrayList<>(this.listaProductos);
            int cuitCliente = Integer.parseInt(this.txtCuitCliente.getText());
            
            this.pedidoAArmar.setFecha(fecha);
            this.pedidoAArmar.setMetodoDePago(formaPago);
            this.pedidoAArmar.setTotal(total);
            this.pedidoAArmar.setCliente(controladora.buscarCliente(cuitCliente));
            
            System.out.println(this.pedidoAArmar.getCliente().getNombre());
            
            /*
            Añado los ProductosPedidos que fueron agregados en la edición.
            Verifico que no esten añadidos para asegurarme que solo se añadan los de la edición
            */
            for (ProductoPedido cadaProdPedido : listaProductos) {
                //Con el IF me aseguro que NO sea añadido el ProductoPedido que estaba anteriormente en el Pedido
                //Solo se añadiran los que fueron agregados a la tabla en la edicón
                if ((null == controladora.buscarProductosPedido(cadaProdPedido.getId())) || (controladora.buscarProductosPedido(cadaProdPedido.getId()).getCantProducto() != cadaProdPedido.getCantProducto())) { //Debo asegurarme en este IF que ademas de tener el mismo ID NO tenga la misma cant que antes. Una vez solucionado, pegar la lógica en el IF de abajo tambnien
                    controladora.guardarProductoPedido(cadaProdPedido);
                } 
                
            }
            
            /*
            Este FOR se encarga de asociar mutuamente cada ProductoPedido con el Pedido y añade el ProductoPedido a la lista de ProductoPedidos de Pedido.
            Al igual que en el FOR de arriba, verifico que no esten añadidos para asegurarme que solo se añadan los de la edición
            */
            for (ProductoPedido cadaProductoNuevo : productos) {
                //if (null == controladora.buscarProductosPedido(cadaProductoNuevo.getId())) {
            if ((null == controladora.buscarProductosPedido(cadaProductoNuevo.getId())) || (controladora.buscarProductosPedido(cadaProductoNuevo.getId()).getCantProducto() != cadaProductoNuevo.getCantProducto())) { //Debo asegurarme en este IF que ademas de tener el mismo ID NO tenga la misma cant que antes. Una vez solucionado, pegar la lógica en el IF de abajo tambnien

                cadaProductoNuevo.setPedido(pedidoAArmar);  // Establecer la relación
                pedidoAArmar.getProductos().add(cadaProductoNuevo); // Sincronizar ambos lados
                }
                
            }
            
            controladora.editarPedido(this.numRemito, fecha, formaPago, total, this.listaProductos, cuitCliente);
            this.listaProductos.clear(); //Reinicia la listaProductos

           
            this.mostrarCartel();
            this.limpiar();
            VerPedidos pantallaVerPedidos = new VerPedidos();
            pantallaVerPedidos.setVisible(true);
            pantallaVerPedidos.setLocationRelativeTo(null);
            this.setVisible(false);
            
        } catch (ParseException ex) {
            //En caso de que la fecha Date tenga un formato incorrecto, lanza una excepción
            JOptionPane.showMessageDialog(this, 
                "Por favor, ingrese una fecha válida en el formato dd/MM/yyyy", 
                "Error de formato", 
                JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            Logger.getLogger(EditarPedido.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnArmarPedidoActionPerformed

    private void btnVolverMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverMenuActionPerformed
        this.volverAlMenu();
    }//GEN-LAST:event_btnVolverMenuActionPerformed

    
    private void btnAniadirProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAniadirProductoActionPerformed

;
        //Creo la excepción con TRY - CATCH en vez de con IF ELSE
        try {
        
        int cantProdPedido = (int) this.spinCantProducto.getValue();
        if (cantProdPedido > this.productoArmarPedido.getCantStock() || cantProdPedido <= MINIMO) {
            throw new StockInvalidoException("Stock Inválido");
        }
        this.productoArmarPedido.descontarStock(cantProdPedido);
        
        //Debo editar en la BD el Producto con el nuevo stock
        controladora.editarProducto(this.productoArmarPedido.getCodigo(), this.productoArmarPedido.getNombre(), this.productoArmarPedido.getDescripcion(), cantProdPedido, this.productoArmarPedido.getPrecio());
        
        ProductoPedido armadoProductoPedido = new ProductoPedido(cantProdPedido, this.productoArmarPedido);
                       
        //controladora.guardarProductoPedido(armadoProductoPedido);
        
        //OJO: No creo que esté bien hecho de esta manera siendo que accedo al atributo listaProductos de manera Static, es para ir tanteando.
        this.listaProductos.add(armadoProductoPedido); //Para añadir el Producto a la lista de Productos del Pedido
        //Ver si en vez de ArmarPedido.listaProductos.add(null) no puede ser this.listaProductos.add(null) y así dejar de ser static

        this.cargarTabla();
        
        this.txtTotal.setText(String.valueOf(this.calcularPrecioTotal()));
        } catch (StockInvalidoException e) {
            JOptionPane optionPane = new JOptionPane( "La cantidad del producto debe ser mayor a 0 y menor al stock disponible: " + this.productoArmarPedido.getCantStock());//Cuerpo del mensaje 
            optionPane.setMessageType (JOptionPane.ERROR_MESSAGE); //Muestro la ventana 
            JDialog dialog = optionPane.createDialog("Error de Stock"); //Titulo
            dialog.setAlwaysOnTop (true); // Que aparezca la ventana sobre el restp
            dialog.setVisible(true); //Que sea visible
        } catch (Exception e) {
            JOptionPane optionPane = new JOptionPane( "Para añadir un pedido, debe elegir un cliente y, al menos, un producto");//Cuerpo del mensaje 
            optionPane.setMessageType (JOptionPane.ERROR_MESSAGE); //Muestro la ventana 
            JDialog dialog = optionPane.createDialog("Error"); //Titulo
            dialog.setAlwaysOnTop (true); // Que aparezca la ventana sobre el restp
            dialog.setVisible(true); //Que sea visible
        
        }
    }//GEN-LAST:event_btnAniadirProductoActionPerformed



    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        if (tablaProductoPedidos.getRowCount() > 0) {
            
            if (tablaProductoPedidos.getSelectedRow() != -1) {                
                int idProductoPedido = Integer.parseInt(String.valueOf(tablaProductoPedidos.getValueAt(tablaProductoPedidos.getSelectedRow(), PRIMERA_COLUMNA)));
                //Guardo el nombre de la persona
                String nombreProductoPedido = String.valueOf(tablaProductoPedidos.getValueAt(tablaProductoPedidos.getSelectedRow(), NOMBRE_COLUMNA));
                controladora.eliminarProductoPedido(idProductoPedido);
                /*
                Explicación:
                idProductoPedido: Requiere de un N° entero. Como la BD convierte todos los numeros a String, debo parsear el DNI de String a int mediante Integer.parseInt().
                String.valueOf(): Para convertir a String
                tabla.getValueAt(posFila, posColumna): Para extraer un valor de la tabla en la celda enviada por parametro.
                tabla.getSelectedRow(): devuelve el index de la fila seleccionada  con el mouse.
                */
                this.mostrarMensaje("fue eliminado correctamente", nombreProductoPedido, "Eliminación Exitosa");
                
                this.cargarTabla();//Muestro la tabla nuevamente, con los registros actualizados
            } else {
                this.mostrarMensajeError("Para eliminar un producto del pedido, debe seleccionarlo","Eliminación Inválida");

            }
        } else {
            this.mostrarMensajeError("Para eliminar un producto del pedido, la tabla NO puede estar vacía ","Eliminación Inválida");
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
            this.cargarTabla(); //Crear una interfaz para implementar este método en todos los JFrame Ver. EJ: VerPedidos, VerClientes y VerProductos
            this.actualizarPrecioTotal();


    }//GEN-LAST:event_formWindowOpened

    private void txtTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalActionPerformed
        
    }//GEN-LAST:event_txtTotalActionPerformed

    private void btnProductoHalladoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProductoHalladoActionPerformed
        if (!this.txtCodProducto.equals("")) {

            try {
                this.productoArmarPedido = controladora.buscarProducto(this.txtCodProducto.getText());
                this.mostrarMensaje(productoArmarPedido.getNombre(), "Producto:", "Producto Hallado");
                this.btnProductoHallado.setText(productoArmarPedido.getNombre());

            } catch (Exception e) {
                this.mostrarMensajeError("No existe ningún producto con ese código. Verifique y vuelva a ingresarlo", "Producto Inexistente");
            }

        }
    }//GEN-LAST:event_btnProductoHalladoActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        
        
try {
            if (tablaProductoPedidos.getRowCount() > 0) {
            
            if (tablaProductoPedidos.getSelectedRow() != -1) {                
                
                //int idProductoPedido = Integer.parseInt(String.valueOf(tablaProductoPedidos.getValueAt(tablaProductoPedidos.getSelectedRow(), PRIMERA_COLUMNA)));
                //Guardo el nombre del Producto
                String nombreProductoPedido = String.valueOf(tablaProductoPedidos.getValueAt(tablaProductoPedidos.getSelectedRow(), TERCER_COLUMNA));
               
                EditarProductoPedido pantallaEditarProdPed = new EditarProductoPedido(nombreProductoPedido, this);
                pantallaEditarProdPed.setVisible(true);
                pantallaEditarProdPed.setLocationRelativeTo(null);
                pantallaEditarProdPed.setAlwaysOnTop(true);
                
                this.cargarTabla();
                this.actualizarPrecioTotal();
                
            } else {
                this.mostrarMensajeError("Para editar un producto del pedido, debe seleccionarlo","Edición Inválida");

            }
        } else {
            this.mostrarMensajeError("Para editar un producto del pedido, la tabla NO puede estar vacía ","Edición Inválida");
        }
        } finally {
            this.cargarTabla();
        }
        
    }//GEN-LAST:event_btnEditarActionPerformed

    private void lblClienteEncontradoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lblClienteEncontradoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lblClienteEncontradoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnAniadirProducto;
    private javax.swing.JToggleButton btnArmarPedido;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JToggleButton btnLimpiar;
    private javax.swing.JButton btnProductoHallado;
    private javax.swing.JToggleButton btnVolverMenu;
    private javax.swing.JComboBox<String> cmbFormaPago;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblArmaPedido;
    private javax.swing.JLabel lblCantProducto;
    private javax.swing.JTextField lblClienteEncontrado;
    private javax.swing.JLabel lblCodProducto;
    private javax.swing.JLabel lblCodProducto1;
    private javax.swing.JLabel lblCuitCliente;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblFormaPago;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JLabel logoAlethya;
    private javax.swing.JSpinner spinCantProducto;
    private javax.swing.JTable tablaProductoPedidos;
    private javax.swing.JTextField txtCodProducto;
    private javax.swing.JTextField txtCuitCliente;
    private javax.swing.JFormattedTextField txtFecha;
    private javax.swing.JTextField txtRemito;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mostrarCartel() {
        //Ventana que mostrará que el Pedido fue añadido correctamente
        JOptionPane optionPane = new JOptionPane("Se añadió el pedido correctamente");//Cuerpo del mensaje 
        optionPane.setMessageType (JOptionPane.INFORMATION_MESSAGE); //Muestro la ventana 
        JDialog dialog = optionPane.createDialog("Guardado Exitoso"); //Titulo
        dialog.setAlwaysOnTop (true); // Que aparezca la ventana sobre el restp
        dialog.setVisible(true); //Que sea visible
    }

    @Override
    public void volverAlMenu() {
        Principal menuPrincipal = new Principal();
        menuPrincipal.setVisible(true);
        menuPrincipal.setLocationRelativeTo(null);
        this.setVisible(false);
    }

    @Override
    public void limpiar() {
        
        //Limpio el Pedido para armar uno nuevo
        this.pedidoAArmar = new Pedido();
        
        //Resetear botones dejando cada uno vacío
        this.txtCodProducto.setText("");//Así dejaré cada boton vacío
        this.txtCuitCliente.setText("");
        this.txtTotal.setText("");
        this.cmbFormaPago.setSelectedIndex(MetodoPago.EFECTIVO.ordinal());
        this.lblClienteEncontrado.setText("Buscar Cliente");
        this.btnProductoHallado.setText("Buscar Producto");
    }

    /*
    Cargo la estructura de la tabla 
    */
    public void cargarTabla() {
       //Esta clase nos permite establecer un modelo dinámico para nuestra modeloTabla y así poder manipularla desde el código
        DefaultTableModel modeloTabla = new DefaultTableModel(){
            
        /*
        Creo una clase anónima con {...} sobreescribir el método isCellEditable 
        para que el texto de las filas y columnas NO puedan ser editables SIN presionar el botón editar
        La diferencia es que al presionar el botón EDITAR, va a llamar a la BD y de esta manera se editara sobre la BD, 
        no sobre la interfaz.
        */
        @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        
        //Celda: Intersección entre fila y columna de la modeloTabla
        
        //Establecemos el nombre de las columnas
        String titulosColumnas[] = {"ID", "Código", "Nombre", "$ Precio Unitario", "Cantidad", "$ Total por Producto"};
        //Para asignar el nombre de las columnas a la modeloTabla
        modeloTabla.setColumnIdentifiers(titulosColumnas);
        
        //Cargo los datos desde la Base de Datos a una lista
        //List<ProductoPedido> listaProductosPedidos = controladora.buscarProductosPedidos();
        
        //Cargo los datos en la lista desde el Static listaProductos 
        
        
        
        this.agregarElementos(modeloTabla, listaProductos);
    }

    /*
    Itero la lista para añadir cada elemento a la modeloTabla
    */
    private void agregarElementos(DefaultTableModel modeloTabla, List<ProductoPedido> listaProductosPedidos) {
        
        if(listaProductosPedidos != null){
            for (ProductoPedido cadaProductoPedido : listaProductosPedidos) {
                //Creo un Array Generico porque cada tipo de dato que posee cada Producto es distinto                Object[] productoPedido = {cadaProductoPedido.getId(), cadaProductoPedido.getProducto().getCodigo(), cadaProductoPedido.getProducto().getNombre(), cadaProductoPedido.getProducto().getPrecio(), cadaProductoPedido.getCantProducto(), cadaProductoPedido.getProducto().getPrecio() * cadaProductoPedido.getCantProducto()};

                Object[] productoPedido = {cadaProductoPedido.getId(), cadaProductoPedido.getProducto().getCodigo(), cadaProductoPedido.getProducto().getNombre(), cadaProductoPedido.getProducto().getPrecio(), cadaProductoPedido.getCantProducto(), cadaProductoPedido.getProducto().getPrecio() * cadaProductoPedido.getCantProducto()};
                //Obs: El length del Array debe coincidir con el length de titulosColumnas[]
                
                modeloTabla.addRow(productoPedido);
            }
        }
        
        tablaProductoPedidos.setModel(modeloTabla);
    }

    private void mostrarMensaje(String mensaje, String nombrePedidoProducto, String titulo) {
        //Ventana que mostrará que el Pedido fue añadido correctamente
        JOptionPane optionPane = new JOptionPane(nombrePedidoProducto + " " + mensaje);//Cuerpo del mensaje 
        optionPane.setMessageType (JOptionPane.INFORMATION_MESSAGE); //Muestro la ventana 
        JDialog dialog = optionPane.createDialog(titulo); //Titulo
        dialog.setAlwaysOnTop (true); // Que aparezca la ventana sobre el restp
        dialog.setVisible(true); //Que sea visible
    }

    private void mostrarMensajeError(String mensaje, String titulo) {
        JOptionPane optionPane = new JOptionPane( mensaje);//Cuerpo del mensaje 
        optionPane.setMessageType (JOptionPane.ERROR_MESSAGE); //Muestro la ventana 
        JDialog dialog = optionPane.createDialog(titulo); //Titulo
        dialog.setAlwaysOnTop (true); // Que aparezca la ventana sobre el restp
        dialog.setVisible(true); //Que sea visible
    }

    public void guardarProdPedEditado(ProductoPedido prodPedidoEditado) {
        
        int indexProdPed = 0;
        ProductoPedido iteradorProdPed;
        ProductoPedido prodPedAEditar = null;
        
        while (prodPedAEditar == null && indexProdPed < listaProductos.size()) {            
            iteradorProdPed = listaProductos.get(indexProdPed);
            if (iteradorProdPed.getId() == prodPedidoEditado.getId()) {
                prodPedAEditar = iteradorProdPed;
                prodPedAEditar.setCantProducto(prodPedidoEditado.getCantProducto());
            } else {
                indexProdPed++;
            }
            
        }
        
    }
    
        /*
    Calcula el precio total de todos los productos que contiene el pedido
    */
    private double calcularPrecioTotal(){
        
        double precioTotal = 0;
        
        for (ProductoPedido cadaProducto : listaProductos) {
            precioTotal += cadaProducto.calcularPrecio();
        }
        
        return precioTotal;
    }

    private void cargarDatosEdicion(int numRemito) {
        
        Pedido pedidoAEditar = controladora.buscarPedido(numRemito);
        
        this.txtFecha.setText(String.valueOf(pedidoAEditar.getFecha()));
        this.txtRemito.setText(String.valueOf(pedidoAEditar.getRemito()));
        this.txtRemito.setEditable(false);
        this.txtCuitCliente.setText(String.valueOf(pedidoAEditar.getCliente().getDni()));
        this.lblClienteEncontrado.setText(pedidoAEditar.getCliente().getNombre());
        this.txtTotal.setEditable(false);
        
        //El método cargarTabla() de formWindowOpened(java.awt.event.WindowEvent evt) se encargará de rellenar la tabla con todos los productos de ese Pedido                             
            }


    @Override
    public void actualizarPrecioTotal() {
        this.txtTotal.setText(String.valueOf(this.calcularPrecioTotal()));
    }
    
    public ProductoPedido buscarProdPedido(String nombreProductoPedido) {
        int index = 0;
        ProductoPedido iteradorProdPed;
        ProductoPedido prodPedHallado = null;
        
        while (index < listaProductos.size() && prodPedHallado == null) {
            iteradorProdPed = listaProductos.get(index);
            if (iteradorProdPed.mismoNombre(nombreProductoPedido)) {
                prodPedHallado = iteradorProdPed;
            } else {
                index++;
            }            
        }
        
        return prodPedHallado;
    }    
}

