package com.mycompany.interfazregistropedidos.igu;

import com.mycompany.interfazregistropedidos.logica.Cliente;
import com.mycompany.interfazregistropedidos.logica.ControladoraLogica;
import com.mycompany.interfazregistropedidos.logica.Pedido;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class VerPedidos extends javax.swing.JFrame implements Cargable{

    ControladoraLogica controladora = null;
    private int COLUMNA_ID  = 1;
    private int REMITO_COLUMNA = 1;
    
    public VerPedidos() {
        controladora = new ControladoraLogica();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblArmaPedido = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaPedidos = new javax.swing.JTable();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnVolverMenu = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        lblArmaPedido.setFont(new java.awt.Font("Engravers MT", 1, 24)); // NOI18N
        lblArmaPedido.setText("PEDIDOS");

        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tablaPedidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tablaPedidos);

        btnEditar.setText("EDITAR");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnEliminar.setText("ELIMINAR");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(256, 256, 256)
                .addComponent(btnEliminar)
                .addGap(135, 135, 135)
                .addComponent(btnEditar)
                .addContainerGap(291, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditar)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(22, 22, 22))
        );

        btnVolverMenu.setText("Volver al Menú");
        btnVolverMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverMenuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(343, 343, 343)
                        .addComponent(lblArmaPedido)
                        .addGap(0, 366, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(360, 360, 360)
                .addComponent(btnVolverMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(lblArmaPedido)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnVolverMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        if (tablaPedidos.getRowCount() > 0) {
            
            if (tablaPedidos.getSelectedRow() != -1) {                
                int remitoPedido = Integer.parseInt(String.valueOf(tablaPedidos.getValueAt(tablaPedidos.getSelectedRow(), COLUMNA_ID)));
                //Guardo el nombre de la persona
                Pedido pedidoAEliminar = controladora.buscarPedido(remitoPedido);
                
                controladora.eliminarPedido(remitoPedido);
                /*
                Explicación:
                remitoPedido: Requiere de un N° entero. Como la BD convierte todos los numeros a String, debo parsear el DNI de String a int mediante Integer.parseInt().
                String.valueOf(): Para convertir a String
                tabla.getValueAt(posFila, posColumna): Para extraer un valor de la tabla en la celda enviada por parametro.
                tabla.getSelectedRow(): devuelve el index de la fila seleccionada  con el mouse.
                */
                this.mostrarMensaje("fue eliminado correctamente", remitoPedido, "Eliminación Exitosa");
                
                this.cargarTabla();//Muestro la tabla nuevamente, con los registros actualizados
            } else {
                this.mostrarMensajeError("Para eliminar un pedido, debe seleccionarlo","Eliminación Inválida");

            }
        } else {
            this.mostrarMensajeError("Para eliminar un pedido, la tabla NO puede estar vacía ","Eliminación Inválida");
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    /*
    Este método se encargar de ejecutar uno o mas métodos en el instante en el que se abre la ventana VerProdcutos
    */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.cargarTabla(); //Crear una interfaz para implementar este método en todos los JFrame Ver. EJ: VerPedidos, VerClientes y VerProductos
    }//GEN-LAST:event_formWindowOpened

    private void btnVolverMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverMenuActionPerformed
        this.volverAlMenu();
    }//GEN-LAST:event_btnVolverMenuActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        if (tablaPedidos.getRowCount() > 0) {
            
            
            if (tablaPedidos.getSelectedRow() != -1) {                
                int remitoPedido = Integer.parseInt(String.valueOf(tablaPedidos.getValueAt(tablaPedidos.getSelectedRow(), COLUMNA_ID)));
                
                EditarPedido pantallaEditarPedido = new EditarPedido(remitoPedido);
                pantallaEditarPedido.setVisible(true);
                this.setVisible(false);
                
                
                this.cargarTabla();//Muestro la tabla nuevamente, con los registros actualizados
            } else {
                this.mostrarMensajeError("Para editar un pedido, debe seleccionarlo","Edición Inválida");

            }
        } else {
            this.mostrarMensajeError("Para editar un pedido, la tabla NO puede estar vacía ","Edición Inválida");
        }
    }//GEN-LAST:event_btnEditarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JToggleButton btnVolverMenu;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblArmaPedido;
    private javax.swing.JTable tablaPedidos;
    // End of variables declaration//GEN-END:variables

    private void cargarTabla() {
        //Esta clase nos permite establecer un modelo dinámico para nuestra modeloTabla y así poder manipularla desde el código
        DefaultTableModel modeloTabla = new DefaultTableModel(){
            
        /*
        Creo una clase anónima con {...} sobreescribir el método isCellEditable 
        para que el texto de las filas y columnas NO puedan ser editables SIN presionar el botón editar
        La diferencia es que al presionar el botón EDITAR, va a llamar a la BD y de esta manera se editara sobre la BD, 
        no sobre la interfaz.
        */
        @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        
        //Celda: Intersección entre fila y columna de la modeloTabla
        
        //Establecemos el nombre de las columnas
        String titulosColumnas[] = {"Fecha", "N° Remito", "Cliente", "Cant Productos Totales", "$ Precio Total", "Forma de Pago" };
        //Para asignar el nombre de las columnas a la modeloTabla
        modeloTabla.setColumnIdentifiers(titulosColumnas);
        
        //Cargo los datos desde la Base de Datos a una lista
        List<Pedido> listaPedidos = controladora.buscarPedidos();
        
        this.agregarElementos(modeloTabla, listaPedidos);
    }

    /*
    Itero la lista para añadir cada elemento a la modeloTabla
    */
    private void agregarElementos(DefaultTableModel modeloTabla, List<Pedido> listaPedidos) {
        
        if(listaPedidos != null){
            for (Pedido cadaPedido : listaPedidos) {
                //Creo un Array Generico porque cada tipo de dato que posee cada Producto es distinto
                Object[] pedido = {cadaPedido.getFecha(), cadaPedido.getRemito(), cadaPedido.getCliente(), cadaPedido.getCliente().calcTotalProductos(cadaPedido), cadaPedido.getTotal(), cadaPedido.getMetodoDePago().toString()};
                //Obs: El length del Array debe coincidir con el length de titulosColumnas[]
                
                modeloTabla.addRow(pedido);
            }
        }
        
        tablaPedidos.setModel(modeloTabla);
    }

    @Override
    public void volverAlMenu() {
        Principal menuPrincipal = new Principal();
        menuPrincipal.setVisible(true);
        menuPrincipal.setLocationRelativeTo(null);
        this.setVisible(false);
    }
    
    private void mostrarMensaje(String mensaje, int remito, String titulo) {
        //Ventana que mostrará que el Pedido fue añadido correctamente
        JOptionPane optionPane = new JOptionPane(remito + " " + mensaje);//Cuerpo del mensaje 
        optionPane.setMessageType (JOptionPane.INFORMATION_MESSAGE); //Muestro la ventana 
        JDialog dialog = optionPane.createDialog(titulo); //Titulo
        dialog.setAlwaysOnTop (true); // Que aparezca la ventana sobre el restp
        dialog.setVisible(true); //Que sea visible
    }

    private void mostrarMensajeError(String mensaje, String titulo) {
        JOptionPane optionPane = new JOptionPane( mensaje);//Cuerpo del mensaje 
        optionPane.setMessageType (JOptionPane.ERROR_MESSAGE); //Muestro la ventana 
        JDialog dialog = optionPane.createDialog(titulo); //Titulo
        dialog.setAlwaysOnTop (true); // Que aparezca la ventana sobre el restp
        dialog.setVisible(true); //Que sea visible
    }
}
